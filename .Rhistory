df=df[fuzzy_filter_results,]
return(df)
}
fuzzy_filter=function(query,database,maximum){ #This function takes a query_set (array of candidate ligation junction sequences) and returns a logical array which indicates whether the element passed the filter or not, provided a set number of mismatches to map from the query to the database
x=agrep(query, database, max.distance=list(all=maximum, insertions=0, deletions=0, substitutions=maximum)) # Find different function that stops after detecting a single match, look at limiting output
if(length(x)==0){ #agrep returns members of the database which can be matched to the query string. So if nothing is returned, the query passes
output=TRUE
}else{
output=FALSE
}
return(output)
}
generate_kmer_freq_tables=function(kmers=c(4,6),genome=genome){
k1=kmers[1]
k2=kmers[2]
genome_seq=as.character(genome@sequence[[1]])
k1mers=hasher(genome_seq,k1)
k2mers=hasher(genome_seq,k2)
k1mer_df=plyr::count(k1mers)
total_k1mer=length(k1mers)
k2mer_df=plyr::count(k2mers)
total_k2mer=length(k2mers)
k1mer_plot<-ggplot(data=k1mer_df, aes(x=x, y=freq)) +
geom_bar(stat="identity")+labs(title="k-mer Spectra for UA159 (k=4)", y="Frequency", x="k-mer")+theme(text = element_text(size=5.5),axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.25))
k2mer_plot<-ggplot(data=k2mer_df, aes(x=x,y=freq)) +
geom_bar(stat="identity")+labs(title="k-mer Spectra for UA159 (k=6)", y="Frequency", x="k-mer")+theme(text = element_text(size=5.5),axis.text.x = element_text(angle = 90, hjust = 1,vjust = 0.25))
output=list()
output[[1]]=k1mer_df
output[[2]]=k1mer_plot
output[[3]]=k2mer_df
output[[4]]=k2mer_plot
return(output)
}
new_df_0_creation=function(accession_number){
helper=function(list,element_index){
return(list[[element_index]])
}
genome_accession=accession_number
genome=import_genome(genome_accession)
ncRNA=genome@other_features
rRNA=ncRNA[ncRNA$type=="rRNA"]
tRNA=ncRNA[ncRNA$type=="tRNA"]
rRNA_transcripts=c()
tRNA_transcripts=c()
if (length(rRNA)>0){
for(j in 1:length(rRNA)){
rRNA_transcripts[j]=transcript_sequence_finder(genome,rRNA[j])
}
}
if (length(tRNA)>0){
for(k in 1:length(tRNA)){
tRNA_transcripts[k]=transcript_sequence_finder(genome,tRNA[k])
}
}
rRNA_transcripts=unique(rRNA_transcripts)
tRNA_transcripts=unique(tRNA_transcripts)
bad_guys=c(rRNA_transcripts,tRNA_transcripts)
output1=data.frame(Sequence=bad_guys)
df_0=initial_df(genome = genome,sample = FALSE)
output2=df_0
output=list(output1,output2)
return(output)
}
save_single_chromosome=function(genome_accession,species_name){
x=lapply(genome_accession,new_df_0_creation) #Output list where each element in the list is a list itself. Element 1 in this list is the rRNA/tRNA seqs and element 2 is the mRNA seqs.
suffix_gene="_Genes.csv"
suffix_rRNA_tRNA="_rRNA_tRNA.csv"
genefile=paste(species_name,suffix_gene,sep="")
rRNA_tRNAfile=paste(species_name,suffix_rRNA_tRNA,sep="")
write.csv(x[[1]][[1]],rRNA_tRNAfile)
write.csv(x[[1]][[2]],genefile)
}
# get command line options, if help option encountered print help and exit,
# otherwise if options not found on command line then set defaults,
#########################
retrieve_genome=function(species_name,genome_accession){
x=lapply(genome_accession,new_df_0_creation) #Output list where each element in the list is a list itself. Element 1 in this list is the rRNA/tRNA seqs and element 2 is the mRNA seqs.
suffix_gene="_Genes.csv"
suffix_rRNA_tRNA="_rRNA_tRNA.csv"
genefile=paste(species_name,suffix_gene,sep="")
rRNA_tRNAfile=paste(species_name,suffix_rRNA_tRNA,sep="")
genedata=data.frame()
rRNA_tRNAdata=data.frame()
for (i in 1:length(genome_accession)){
genedata =rbind(genedata,x[[i]][[2]])
rRNA_tRNAdata=rbind(rRNA_tRNAdata,x[[i]][[1]])
}
write.csv(rRNA_tRNAdata,rRNA_tRNAfile)
write.csv(genedata,genefile)
}
library(rsm)
figcolors <- read.csv("colors.csv",sep=",")
Red="#d7191c"
Orange="#fdae61"
Yellow="#ffffbf"
LightBlue="#abd9e9"
Blue="#2c7bb6"
# 2 Factor CCD Data
design_12_4_20 <- read.csv("12-4-20 Raw Data.csv")[,c(1:5,8)]
design_12_4_20$Probe_16s_Coded <- round(design_12_4_20$Probe_16s_Coded,0)
design_12_4_20$Probe_23s_Coded <- round(design_12_4_20$Probe_23s_Coded,0)
knitr::kable(design_12_4_20,"latex")
# 3 Factor CCD  Data and analysis
rRNA_dep <- ccd(Depletion~Probe+RNA+Bead,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(Probe~(probes-500)/(300/1.682),
RNA~(totalRNA-250)/(150/1.682),
Bead~(beads-100)/(50/1.682)))
rRNA_dep$Probe_Coded <- round(rRNA_dep$Probe,0)
rRNA_dep$RNA_Coded <- round(rRNA_dep$RNA,0)
rRNA_dep$Bead_Coded <- round(rRNA_dep$Bead,0)
rRNA_dep$Probe_Mass <- round(rRNA_dep$Probe*(300/1.682)+500,0)
rRNA_dep$RNA_Mass <- round(rRNA_dep$RNA*(150/1.682)+250,0)
rRNA_dep$Bead_Mass <- round(rRNA_dep$Bead*(50/1.682)+100,0)
rRNA_dep$Abundance <- c(69.17,1356.98,24.43,559.69,23.36,646.81,10.00,114.19,115.38,183.34,176.01,4.31,903.89,472.40,53.23,523.93,169.35)
rRNA_dep$Depletion <- 100-rRNA_dep$Abundance
rRNA_dep$run=c(1:nrow(rRNA_dep))
round(rRNA)
SOrRNA_dep <- rsm(Depletion ~ SO(Probe,RNA,Bead),data=rRNA_dep)
summary(SOrRNA_dep)
4**2
4^2
library(rsm)
figcolors <- read.csv("colors.csv",sep=",")
Red="#d7191c"
Orange="#fdae61"
Yellow="#ffffbf"
LightBlue="#abd9e9"
Blue="#2c7bb6"
# 2 Factor CCD Data
design_12_4_20 <- read.csv("12-4-20 Raw Data.csv")[,c(1:5,8)]
design_12_4_20$Probe_16s_Coded <- round(design_12_4_20$Probe_16s_Coded,0)
design_12_4_20$Probe_23s_Coded <- round(design_12_4_20$Probe_23s_Coded,0)
knitr::kable(design_12_4_20,"latex")
# 3 Factor CCD  Data and analysis
rRNA_dep <- ccd(Depletion~Probe+RNA+Bead,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(Probe~(probes-500)/(300/1.682),
RNA~(totalRNA-250)/(150/1.682),
Bead~(beads-100)/(50/1.682)))
rRNA_dep$Probe_Coded <- round(rRNA_dep$Probe,0)
rRNA_dep$RNA_Coded <- round(rRNA_dep$RNA,0)
rRNA_dep$Bead_Coded <- round(rRNA_dep$Bead,0)
rRNA_dep$Probe_Mass <- round(rRNA_dep$Probe*(300/1.682)+500,0)
rRNA_dep$RNA_Mass <- round(rRNA_dep$RNA*(150/1.682)+250,0)
rRNA_dep$Bead_Mass <- round(rRNA_dep$Bead*(50/1.682)+100,0)
rRNA_dep$Abundance <- c(69.17,1356.98,24.43,559.69,23.36,646.81,10.00,114.19,115.38,183.34,176.01,4.31,903.89,472.40,53.23,523.93,169.35)
rRNA_dep$Depletion <- 100-rRNA_dep$Abundance
rRNA_dep$run=c(1:nrow(rRNA_dep))
round(rRNA)
SOrRNA_dep <- rsm(Depletion ~ SO(Probe,RNA,Bead),data=rRNA_dep)
summary(SOrRNA_dep)
#Residual Standard Error
k=length(SOrRNA_dep$coefficients)-1
SSE=sum(SOrRNA_dep$residuals^2)
n=length(SOrRNA_dep$residuals)
RSE=sqrt(SSE/(n-(1+k)))
RSE
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix/tree/main/DispenseFormulatrix")
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
devtools::install_github("bmdavid2/DispenseFormulatrix")
devtools::install_github("bmdavid2/DispenseFormulatrix")
devtools::install_github(bmdavid2/DispenseFormulatrix)
devtools::install_github(bmdavid2/DispenseFormulatrix)
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
?DispenseFormulatrix::assign_wells
?DispenseFormulatrix::make_dispense_list
n=8
l <- (-(n-1)/2):((n-1)/2)
-2:10
-3.5:3.5
m=8
L <- matrix(NA,nrow=n,rcol=m)
L <- matrix(NA,nrow=n,ncol=m)
for(j in 1:m) L[,j] <- sample(l,n)
?sample
L
U <- matrix(runif(n*m)),ncol=m)
U <- matrix(runif(n*m),ncol=m)
U
L +(n-1)/2
L+(n-1)/2+U
X <- (L+(n-1)/2+U)/n
X
plot(X,xlim(c(0,1)),ylim(c(0,1)))
plot(X,xlim=c(0,1),ylim=c(0,1))
abline(h=c((l+(n-1)/2)/n,1)
)
abline(v=c((l+(n-1)/2)/n,1))
?qbeta
qbeta(1:10,1,1)
qbeta(1:10,3,2)
qbeta(0:0.1:1,3,2)
0:0.1:1
0:1:0.1
0:10/10
qbeta(0:10/10,3,2)
install.packages(maps)
"maps"
install.packages("maps")
library(maps)
map("state",fill=T,plot=F)
map("state",fill=T,plot=T)
?maps
choose(81,7)
choose(81,7)*(1/36)^7*(35/36)^74
choose(81,12)*(1/36)^12*(35/36)^69
platefile <- c("breakaway_pcr_96.pd.txt","PT3-96-Assay.pd.txt","PT9-384-Assay.pd.txt")
names(platefile) <- c("breakaway_pcr_96","96-well","384-well")
platefile["breakaway_pcr_96"]
noah <- read.csv("~/Documents/Jensen Lab/Noah/QuadCarbonSourceOption1_DLInput_BenEdition.csv")
#' Convert a reagent plate layout to a mantis dispense list
#'
#' @param filename a filename for the dispense list. must end in ".dl.txt"
#' @param reagent_layout a list of reagent volume matricies. see 'reagents_to_layout'
#' @export
export_mantis_worklist <- function(filename,reagent_layout,platetype="breakaway_pcr_96"){
num_reagents <- length(reagent_layout)
delay_header <- c(num_reagents)
platefile <- c("breakaway_pcr_96.pd.txt","PT3-96-Assay.pd.txt","PT9-384-Assay.pd.txt")
names(platefile) <- c("breakaway_pcr_96","96-well","384-well")
for (i in c(1:num_reagents)){
delay_header <- c(delay_header,c(0,""))
}
outfile=file(filename,open="w",encoding = "UTF-8")
write.table(c("[ Version: 5 ]"),file=outfile,append=FALSE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(c(platefile[platetype]),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(delay_header),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(c(1)),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(delay_header),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
for (name in names(reagent_layout)){
write.table(t(c(name,"","Normal")),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(c("Well",1)),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(reagent_layout[[name]],file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
}
close(outfile)
}
#' Convert an ordered reagent volume dataframe to a plate layout
#'
#' @param reagent_df reagent volumes in the order they should appear on the plate. Must only be reagent volumes.
#' @param platetype="96-well" specifies the plate type for the layout. Must be either "96-well" or "384-well".
#' @export
reagents_to_layout<- function(reagent_df,platetype="breakaway_pcr_96"){
if (platetype =="96-well" || platetype= "breakaway_pcr_96"){
nrows=8
ncols=12
} else if (platetype=="384-well"){
nrows=16
ncols=24
} else {
stop("Function requires `96-well` or `384-well`")
}
n_reagents <- length(names(reagent_df))
reagentnames <- names(reagent_df)
reagent_layout <- list()
for (i in 1:n_reagents){
plate <- matrix(0,nrows,ncols)
plate[1:nrow(reagent_df)] <- reagent_df[,i]
plate <- format(plate,nsmall=1,trim=TRUE)
reagent_layout <- append(reagent_layout,I(list(plate)))
}
names(reagent_layout) <- reagentnames
return(reagent_layout)
}
#' Convert a volume based experimental design to an ordered reagent dataframe
#'
#' @param design_df Formatted dataframe with columns for each reagent, followed by either well location or row col
#' @param platetype="96-well" specifies the plate type for the design
#' @export
design_to_reagents <- function(design_df,platetype="breakaway_pcr_96"){
welldict <- create_welldict(platetype = platetype)
design_df$Well <- paste(as.character(design_df$Row),as.character(design_df$Col),sep="")
reagentnames <- names(design_df)[1:(ncol(design_df)-3)]
unused_wells <- setdiff(names(welldict),design_df$Well)
n_unused_wells <- length(unused_wells)
expts_to_fill_plate <- data.frame(matrix(0,n_unused_wells,ncol(design_df)))
names(expts_to_fill_plate) <- names(design_df)
expts_to_fill_plate$Well <- unused_wells
design_df_filled <- rbind(design_df,expts_to_fill_plate)
ordered_design_df <- design_df_filled[order(factor(design_df_filled[,ncol(design_df_filled)],levels=wellnames)),]
print(ordered_design_df)
reagent_df <- ordered_design_df[,c(1:(ncol(ordered_design_df)-3)),drop=FALSE]
names(reagent_df)=reagentnames
#print(reagent_df)
return(reagent_df)
}
create_welldict <- function(platetype="breakaway_pcr_96"){
if (platetype =="96-well" || platetype= "breakaway_pcr_96"){
nrows=8
ncols=12
welldict <- c(1:96)
wellnames <- c()
rownames <- c("A","B","C","D","E","F","G","H")
colnames <- as.character(c(1:12))
for (i in colnames){
for (j in rownames){
wellnames <- c(wellnames,paste(j,i,sep=""))
}
}
names(welldict) <- wellnames
} else if (platetype=="384-well") {
nrows=16
ncol=24
welldict <- c(1:384)
wellnames <- c()
rownames <- c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
colnames <- as.character(c(1:24))
for (i in colnames){
for (j in rownames){
wellnames <- c(wellnames,paste(j,i,sep=""))
}
}
names(welldict) <- wellnames
} else {
stop("Enter a valid plate type")
}
return(welldict)
}
#' Add well locations to a volumetric experimental design
#'
#' @param design Volumetric experimental design
#' @param filename="" Optional output file. Default outputs to the console
#' @param platetype="96-well" Must be either "96-well" or "384-well"
#' @param randomize=FALSE If true, randomize the assigned wells. Else, put them in order.
#' @export
assign_wells <- function(design,filename="",platetype="breakaway_pcr_96",randomize=FALSE){
welldict <- create_welldict(platetype=platetype)
if (randomize){
welldict <- sample(welldict)
}
design$Row <- names(welldict)[1:nrow(design)]
design$Col <- names(welldict)[1:nrow(design)]
design$Well <- names(welldict)[1:nrow(design)]
write.csv(design,file=filename)
return(design)
}
#' Main running funciton. Turn an experimental design into a dispense list
#'
#' @param design Volumetric experimental design. Must include either Well or Row & Col columns
#' @param name Design name. Funciton adds appropriate suffix automatically
#' @param platetype="96-well" specifies the plate type. Must be one of: \n "96-well" \n "breakaway_pcr_96" \n 384-well".
#' @export
#'
make_dispense_list <- function(design,name,platetype="breakaway_pcr_96",...){
kwargs=list(...)
filename <- paste(name,".dl.txt")
reagents <- design_to_reagents(design,platetype=platetype,...)
layout <- reagents_to_layout(reagents,platetype=platetype,...)
export_mantis_worklist(filename,layout,platetype = platetype,...)
}
#' Convert a reagent plate layout to a mantis dispense list
#'
#' @param filename a filename for the dispense list. must end in ".dl.txt"
#' @param reagent_layout a list of reagent volume matricies. see 'reagents_to_layout'
#' @export
export_mantis_worklist <- function(filename,reagent_layout,platetype="breakaway_pcr_96"){
num_reagents <- length(reagent_layout)
delay_header <- c(num_reagents)
platefile <- c("breakaway_pcr_96.pd.txt","PT3-96-Assay.pd.txt","PT9-384-Assay.pd.txt")
names(platefile) <- c("breakaway_pcr_96","96-well","384-well")
for (i in c(1:num_reagents)){
delay_header <- c(delay_header,c(0,""))
}
outfile=file(filename,open="w",encoding = "UTF-8")
write.table(c("[ Version: 5 ]"),file=outfile,append=FALSE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(c(platefile[platetype]),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(delay_header),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(c(1)),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(delay_header),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
for (name in names(reagent_layout)){
write.table(t(c(name,"","Normal")),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(t(c("Well",1)),file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
write.table(reagent_layout[[name]],file=outfile,append=TRUE,row.names=FALSE,col.names=FALSE,na="",quote=FALSE,fileEncoding = "UTF-8",sep="\t",eol="\r\n")
}
close(outfile)
}
#' Convert an ordered reagent volume dataframe to a plate layout
#'
#' @param reagent_df reagent volumes in the order they should appear on the plate. Must only be reagent volumes.
#' @param platetype="96-well" specifies the plate type for the layout. Must be either "96-well" or "384-well".
#' @export
reagents_to_layout<- function(reagent_df,platetype="breakaway_pcr_96"){
if (platetype =="96-well" || platetype== "breakaway_pcr_96"){
nrows=8
ncols=12
} else if (platetype=="384-well"){
nrows=16
ncols=24
} else {
stop("Function requires `96-well` or `384-well`")
}
n_reagents <- length(names(reagent_df))
reagentnames <- names(reagent_df)
reagent_layout <- list()
for (i in 1:n_reagents){
plate <- matrix(0,nrows,ncols)
plate[1:nrow(reagent_df)] <- reagent_df[,i]
plate <- format(plate,nsmall=1,trim=TRUE)
reagent_layout <- append(reagent_layout,I(list(plate)))
}
names(reagent_layout) <- reagentnames
return(reagent_layout)
}
#' Convert a volume based experimental design to an ordered reagent dataframe
#'
#' @param design_df Formatted dataframe with columns for each reagent, followed by either well location or row col
#' @param platetype="96-well" specifies the plate type for the design
#' @export
design_to_reagents <- function(design_df,platetype="breakaway_pcr_96"){
welldict <- create_welldict(platetype = platetype)
design_df$Well <- paste(as.character(design_df$Row),as.character(design_df$Col),sep="")
reagentnames <- names(design_df)[1:(ncol(design_df)-3)]
unused_wells <- setdiff(names(welldict),design_df$Well)
n_unused_wells <- length(unused_wells)
expts_to_fill_plate <- data.frame(matrix(0,n_unused_wells,ncol(design_df)))
names(expts_to_fill_plate) <- names(design_df)
expts_to_fill_plate$Well <- unused_wells
design_df_filled <- rbind(design_df,expts_to_fill_plate)
ordered_design_df <- design_df_filled[order(factor(design_df_filled[,ncol(design_df_filled)],levels=wellnames)),]
print(ordered_design_df)
reagent_df <- ordered_design_df[,c(1:(ncol(ordered_design_df)-3)),drop=FALSE]
names(reagent_df)=reagentnames
#print(reagent_df)
return(reagent_df)
}
create_welldict <- function(platetype="breakaway_pcr_96"){
if (platetype =="96-well" || platetype== "breakaway_pcr_96"){
nrows=8
ncols=12
welldict <- c(1:96)
wellnames <- c()
rownames <- c("A","B","C","D","E","F","G","H")
colnames <- as.character(c(1:12))
for (i in colnames){
for (j in rownames){
wellnames <- c(wellnames,paste(j,i,sep=""))
}
}
names(welldict) <- wellnames
} else if (platetype=="384-well") {
nrows=16
ncol=24
welldict <- c(1:384)
wellnames <- c()
rownames <- c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
colnames <- as.character(c(1:24))
for (i in colnames){
for (j in rownames){
wellnames <- c(wellnames,paste(j,i,sep=""))
}
}
names(welldict) <- wellnames
} else {
stop("Enter a valid plate type")
}
return(welldict)
}
#' Add well locations to a volumetric experimental design
#'
#' @param design Volumetric experimental design
#' @param filename="" Optional output file. Default outputs to the console
#' @param platetype="96-well" Must be either "96-well" or "384-well"
#' @param randomize=FALSE If true, randomize the assigned wells. Else, put them in order.
#' @export
assign_wells <- function(design,filename="",platetype="breakaway_pcr_96",randomize=FALSE){
welldict <- create_welldict(platetype=platetype)
if (randomize){
welldict <- sample(welldict)
}
design$Row <- names(welldict)[1:nrow(design)]
design$Col <- names(welldict)[1:nrow(design)]
design$Well <- names(welldict)[1:nrow(design)]
write.csv(design,file=filename)
return(design)
}
#' Main running funciton. Turn an experimental design into a dispense list
#'
#' @param design Volumetric experimental design. Must include either Well or Row & Col columns
#' @param name Design name. Funciton adds appropriate suffix automatically
#' @param platetype="96-well" specifies the plate type. Must be one of: \n "96-well" \n "breakaway_pcr_96" \n 384-well".
#' @export
#'
make_dispense_list <- function(design,name,platetype="breakaway_pcr_96",...){
kwargs=list(...)
filename <- paste(name,".dl.txt")
reagents <- design_to_reagents(design,platetype=platetype,...)
layout <- reagents_to_layout(reagents,platetype=platetype,...)
export_mantis_worklist(filename,layout,platetype = platetype,...)
}
make_dispense_list(naoh,"noah_test",platetype="384-well")
make_dispense_list(noah,"noah_test",platetype="384-well")
make_dispense_list(noah,"noah_test",platetype="384-well")
make_dispense_list(noah,"noah_test",platetype="384-well")
make_dispense_list(noah,"/Docuemnts/Jensen Lab/Noah/noah_test",platetype="384-well")
make_dispense_list(noah,"~/Docuemnts/Jensen Lab/Noah/noah_test",platetype="384-well")
make_dispense_list(noah,"~/Documents/Jensen Lab/Noah/noah_test",platetype="384-well")
roxygen2::roxygenize()
setwd("~/Documents/GitHub/DispenseFormulatrix/R")
setwd("~/Documents/GitHub/DispenseFormulatrix")
roxygen2::roxygenize()
noah <- read.csv("~/Documents/Jensen Lab/Noah/QuadCarbonSourceOption1_DLInput_BenEdition.csv")
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
help(DispenseFormulatrix::make_dispense_list)
help(make_dispense_list())
roxygen2::roxygenize
roxygen2::roxygenize()
