expts <- coded_design[[reg]]==as.numeric(factor_levels[[reg]][j])
designs[i][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[i][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(designs)
}
test <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
View(test)
test
warnings()
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(sort(unique(dispense_group)) != c(1:max(dispense_group))){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- coded_design[[reg]]==as.numeric(factor_levels[[reg]][j])
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(designs)
}
test <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
View(test)
test
volume_levels
View(design)
design$B
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(sort(unique(dispense_group)) != c(1:max(dispense_group))){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- coded_design[[reg]]==as.numeric(factor_levels[[reg]][j])
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(designs,volume_mapping)
}
test,mapping <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
(test,mapping) <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(sort(unique(dispense_group)) != c(1:max(dispense_group))){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- coded_design[[reg]]==as.numeric(factor_levels[[reg]][j])
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(list(designs,volume_mapping))
}
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
a <- testlist[[1]]
b <- testlist[[2]]
a
b
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,2,3,4,5),c(6,7,8,9,10),c(1,1,1,1,1))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
a <- testlist[[1]]
b <- testlist[[2]]
a
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(sort(unique(dispense_group)) != c(1:max(dispense_group))){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- coded_design[[reg]]==as.numeric(factor_levels[[reg]][j])
print(expts)
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(list(designs,volume_mapping))
}
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(sort(unique(dispense_group)) != c(1:max(dispense_group))){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- as.character(coded_design[[reg]])==factor_levels[[reg]][j]
print(expts)
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(list(designs,volume_mapping))
}
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
a <- testlist[[1]]
b <- testlist[[2]]
a
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,2,3,4,5),c(6,7,8,9,10),c(1,1,1,1,1))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,3,1)
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
a
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(length(unique(dispense_group)) != max(dispense_group)){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- as.character(coded_design[[reg]])==factor_levels[[reg]][j]
print(expts)
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(list(designs,volume_mapping))
}
get_factor_levels <- function(reagent,design){
levels <- as.character(sort(unique(design[[reagent]])))
return(levels)
}
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,2,3,4,5),c(6,7,8,9,10),c(1,1,1,1,1))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,3,1)
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(length(unique(dispense_group)) != max(dispense_group)){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- as.character(coded_design[[reg]])==factor_levels[[reg]][j]
print(expts)
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(list(designs,volume_mapping))
}
get_factor_levels <- function(reagent,design){
levels <- as.character(sort(unique(design[[reagent]])))
return(levels)
}
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
testlist <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
a <- testlist[[1]]
b <- testlist[[2]]
a
#' Convert a coded experimental design into a volume-based design for automated dispensing
#'
#' @param coded_design
#'
#' @export
process_design <- function(coded_design,reagent_names,volume_levels,separate_stocks,dispense_group){
n <- nrow(coded_design)
colnames=names(coded_design)
if(!is.element("Row",colnames) || !is.element("Col",colnames)){
stop("Must provide `Row` and `Col` columns for well positions")
}
names(separate_stocks) <- reagent_names
factor_levels <- lapply(reagent_names,get_factor_levels,design=coded_design)
names(factor_levels) <- reagent_names
volume_mapping <- list()
for (i in 1:length(reagent_names)){
volume_mapping[[i]] <- volume_levels[[i]]
names(volume_mapping[[i]]) <- factor_levels[[i]]
}
names(volume_mapping) <- reagent_names
if(length(unique(dispense_group)) != max(dispense_group)){
stop("Dispense groups must be ordered cronologically")
}
designs <- list()
for (i in 1:max(dispense_group)){
designs[[i]] <- data.frame(coded_design$Row,coded_design$Col)
names(designs[[i]]) <- c("Row","Col")
for (reg in reagent_names[dispense_group==i]){
if (separate_stocks[[reg]]){
suffixes <- LETTERS[1:length(volume_mapping[[reg]])]
names <- paste(reg,suffixes,sep="_")
for (j in 1:length(names)){
designs[[i]][[names[j]]] <- rep(0,n)
expts <- as.character(coded_design[[reg]])==factor_levels[[reg]][j]
designs[[i]][[names[j]]][expts] <- volume_mapping[[reg]][[j]]
}
} else{
designs[[i]][[reg]] <-  volume_mapping[[reg]][as.character(coded_design[[reg]])]
}
}
}
return(designs)
}
get_factor_levels <- function(reagent,design){
levels <- as.character(sort(unique(design[[reagent]])))
return(levels)
}
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
test <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
test
reagent_names <- c("A","B","C","D")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
test <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
test <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
roxygen2::roxygenise()
setwd("~/Documents/GitHub/DispenseFormulatrix")
roxygen2::roxygenise()
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix",force=T)
library(DispenseFormulatrix)
library(rsm)
# Test 13 -----------------------------------------------------------------
# test the process_design function
design <- ccd(Y~A+B+C,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/1.682),
B~(Temp-250)/(150/1.682),
C~(Time-100)/(50/1.682)))
design <- assign_wells(design)reagent_names <- c("A","B","C")
# test the process_design function
design <- ccd(Y~A+B+C,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/1.682),
B~(Temp-250)/(150/1.682),
C~(Time-100)/(50/1.682)))
design <- assign_wells(design)
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
multi_dispense(test_process,"~/Desktop/test13",platetype="breakaway_pcr_96")
design <- ccd(Y~A+B+C+D+E+G+H,
n0=c(10,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable')
design <- assign_wells(design)
reagent_names <- c("A","B","C","D","E","G","H")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5),c(5,5,5,5,5),c(10,15,20,25,30),c(2,2,2,2,2),c(0,1,2,3,4))
separate_stocks <- c(T,T,F,F,T,F)
dispense_group <- c(1,2,1,2,1,3,3)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
design <- ccd(Y~A+B+C+D+E+G+H,
n0=c(10,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable')
design <- assign_wells(design)
reagent_names <- c("A","B","C","D","E","G","H")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5),c(5,5,5,5,5),c(10,15,20,25,30),c(2,2,2,2,2),c(0,1,2,3,4))
separate_stocks <- c(T,T,F,F,T,F,T)
dispense_group <- c(1,2,1,2,1,3,3)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
multi_dispense(test_process,"~/Desktop/test13",platetype="384-well")
test process
test_process
design <- ccd(Y~A+B+C+D+E+G+H,
n0=c(10,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable')
design <- assign_wells(design,platetype="384-well")
reagent_names <- c("A","B","C","D","E","G","H")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5),c(5,5,5,5,5),c(10,15,20,25,30),c(2,2,2,2,2),c(0,1,2,3,4))
separate_stocks <- c(T,T,F,F,T,F,T)
dispense_group <- c(1,2,1,2,1,3,3)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
multi_dispense(test_process,"~/Desktop/test13",platetype="384-well")
# test the process_design function
design <- ccd(Y~A+B+C,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/1.682),
B~(Temp-250)/(150/1.682),
C~(Time-100)/(50/1.682)))
design <- assign_wells(design)
reagent_names <- c("A","B","C")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5))
separate_stocks <- c(T,T,F)
dispense_group <- c(1,2,1)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
multi_dispense(test_process,"~/Desktop/test13",platetype="breakaway_pcr_96")
# Test 14 -----------------------------------------------------------------
design <- ccd(Y~A+B+C+D+E+G+H,
n0=c(10,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable')
design <- assign_wells(design,platetype="384-well")
reagent_names <- c("A","B","C","D","E","G","H")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5),c(5,5,5,5,5),c(10,15,20,25,30),c(2,2,2,2,2),c(0,1,2,3,4))
separate_stocks <- c(T,T,F,F,T,F,T)
dispense_group <- c(1,2,1,2,1,3,3)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
multi_dispense(test_process,"~/Desktop/test14",platetype="384-well")
design <- ccd(Y~A+B+C+D+E+G+Water+Time,
n0=c(10,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable')
design <- assign_wells(design,platetype="384-well")
reagent_names <- c("A","B","C","D","E","G","Water")
volume_levels <- list(c(1,1,1,1,1),c(6,7,8,9,10),c(1,2,3,4,5),c(5,5,5,5,5),c(10,15,20,25,30),c(2,2,2,2,2),c(0,1,2,3,4))
separate_stocks <- c(T,T,F,F,T,F,T)
dispense_group <- c(1,2,1,2,1,3,3)
test_process <- process_design(design,reagent_names,volume_levels,separate_stocks,dispense_group)
multi_dispense(test_process,"~/Desktop/test15",platetype="384-well")
roxygen2::roxygenise()
