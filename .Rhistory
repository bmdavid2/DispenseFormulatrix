return(grad)
}
ridge_diy <- function(model,center,direction="max",step_size=0.01,max_dist=sqrt(length(center))){
b0 <- model[[1]]
b <- model[[2]]
B <- model[[3]]
location <- list()
location[[1]] <- center
current <- center
distance <- c()
distance <- c(distance,norm(current,"2"))
resp <- c()
resp <- c(resp,response(current,b0,b,B))
idx <- 2
while(norm(current,"2")<max_dist){
if (direction=="max"){
new <- current +step_size*gradient(current,b,B)
}else if(direction=="min"){
new <- current - step_size*gradient(current,b,B)
}
location[[idx]] <- new
distance <- c(distance,norm(new,"2"))
resp <- c(resp,response(new,b0,b,B))
current <- new
idx <- idx+1
}
out <- data.frame(matrix(t(simplify2array(location)),ncol=length(b)))
out$distance <- distance
out$response <- resp
return(out)
}
## Example dataset and model
rRNA_dep <- ccd(Depletion~Probe+RNA+Bead,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(Probe~(probes-500)/(300/1.682),
RNA~(totalRNA-250)/(150/1.682),
Bead~(beads-100)/(50/1.682)))
rRNA_dep$Probe_Coded <- round(rRNA_dep$Probe,0)
rRNA_dep$RNA_Coded <- round(rRNA_dep$RNA,0)
rRNA_dep$Bead_Coded <- round(rRNA_dep$Bead,0)
rRNA_dep$Probe_Mass <- round(rRNA_dep$Probe*(300/1.682)+500,0)
rRNA_dep$RNA_Mass <- round(rRNA_dep$RNA*(150/1.682)+250,0)
rRNA_dep$Bead_Mass <- round(rRNA_dep$Bead*(50/1.682)+100,0)
rRNA_dep$Abundance <- c(69.17,1356.98,24.43,559.69,23.36,646.81,10.00,114.19,115.38,183.34,176.01,4.31,903.89,472.40,53.23,523.93,169.35)
rRNA_dep$Depletion <- 100-rRNA_dep$Abundance
rRNA_dep$run=c(1:nrow(rRNA_dep))
SOrRNA_dep <- rsm(Abundance ~ SO(Probe_Coded,RNA_Coded,Bead_Coded),data=rRNA_dep)
coeff <- SOrRNA_dep$coefficients
b0 <- coeff["(Intercept)"]
b <- matrix(coeff[2:4])
TWI <- coeff[5:7]
PQ <- coeff[8:10]
B <- matrix(c(PQ[1],TWI[1]/2,TWI[2]/2,TWI[1]/2,PQ[2],TWI[3]/2,TWI[2]/2,TWI[3]/2,PQ[3]),nrow=3)
x <- stationary_pt(b0,b,B)
model <- list(b0,b,B)
ridge.out <- ridge_diy(model,c(0,0,0),direction="min",step_size=0.001)
x
ridge.out
library(rsm)
## Eigenanalysis
response <- function(x,b0,b,B){
res <- b0 + 0.5*t(x) %*% b
return(res)
}
stationary_pt <- function(b0,b,B){
pt <- -0.5*solve(B) %*% b
response <- b0 + 0.5*t(pt) %*% b
eigvals <- eigen(B)$values
neigs <- length(b)
type <- "saddle"
if (length(which(eigvals>0))==neigs){
type <- "minimum"
}
if (length(which(eigvals<0))==neigs){
type <- "maximum"
}
out <- list(point=pt,response=response,eigenvalues=eigvals,type=type)
return(out)
}
## Ridge Analysis
gradient <- function(x,b,B){
grad <- b+2*B%*%x
return(grad)
}
ridge_diy <- function(model,center,direction="max",step_size=0.01,max_dist=sqrt(length(center))){
b0 <- model[[1]]
b <- model[[2]]
B <- model[[3]]
location <- list()
location[[1]] <- center
current <- center
distance <- c()
distance <- c(distance,norm(current,"2"))
resp <- c()
resp <- c(resp,response(current,b0,b,B))
idx <- 2
while(norm(current,"2")<max_dist){
if (direction=="max"){
new <- current +step_size*gradient(current,b,B)
}else if(direction=="min"){
new <- current - step_size*gradient(current,b,B)
}
location[[idx]] <- new
distance <- c(distance,norm(new,"2"))
resp <- c(resp,response(new,b0,b,B))
current <- new
idx <- idx+1
}
out <- data.frame(matrix(t(simplify2array(location)),ncol=length(b)))
out$distance <- distance
out$response <- resp
return(out)
}
## Example dataset and model
rRNA_dep <- ccd(Depletion~Probe+RNA+Bead,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(Probe~(probes-500)/(300/1.682),
RNA~(totalRNA-250)/(150/1.682),
Bead~(beads-100)/(50/1.682)))
rRNA_dep$Probe_Coded <- round(rRNA_dep$Probe,0)
rRNA_dep$RNA_Coded <- round(rRNA_dep$RNA,0)
rRNA_dep$Bead_Coded <- round(rRNA_dep$Bead,0)
rRNA_dep$Probe_Mass <- round(rRNA_dep$Probe*(300/1.682)+500,0)
rRNA_dep$RNA_Mass <- round(rRNA_dep$RNA*(150/1.682)+250,0)
rRNA_dep$Bead_Mass <- round(rRNA_dep$Bead*(50/1.682)+100,0)
rRNA_dep$Abundance <- c(69.17,1356.98,24.43,559.69,23.36,646.81,10.00,114.19,115.38,183.34,176.01,4.31,903.89,472.40,53.23,523.93,169.35)
rRNA_dep$Depletion <- 100-rRNA_dep$Abundance
rRNA_dep$run=c(1:nrow(rRNA_dep))
SOrRNA_dep <- rsm(Abundance ~ SO(Probe_Coded,RNA_Coded,Bead_Coded),data=rRNA_dep)
coeff <- SOrRNA_dep$coefficients
b0 <- coeff["(Intercept)"]
b <- matrix(coeff[2:4])
TWI <- coeff[5:7]
PQ <- coeff[8:10]
B <- matrix(c(PQ[1],TWI[1]/2,TWI[2]/2,TWI[1]/2,PQ[2],TWI[3]/2,TWI[2]/2,TWI[3]/2,PQ[3]),nrow=3)
x <- stationary_pt(b0,b,B)
model <- list(b0,b,B)
ridge.out <- ridge_diy(model,c(0,0,0),direction="min",step_size=0.001)
x
ridge.out
load("~/Documents/Graduate  School/Year 3 Semester 1/STAT 682/Final Project/Final_Project.RData")
runsum <- c(0,0,0,0)
for (i in c(1:n_sims)){
runsum=runsum+trajectory[[i]]
X1 <- c(X1,trajectory[[i]][1])
X2 <- c(X2,trajectory[[i]][2])
X3 <- c(X3,trajectory[[i]][3])
X4 <- c(X4,trajectory[[i]][4])
}
X1=c()
X2=c()
X3=c()
X4=c()
runsum <- c(0,0,0,0)
for (i in c(1:n_sims)){
runsum=runsum+trajectory[[i]]
X1 <- c(X1,trajectory[[i]][1])
X2 <- c(X2,trajectory[[i]][2])
X3 <- c(X3,trajectory[[i]][3])
X4 <- c(X4,trajectory[[i]][4])
}
traj_df <- data.frame(X1,X2,X3,X4)
library(ggplot2)
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
theme_classic()
plot1
View(X1)
trajectory[[1]][1]
trajectory[[1]][[1]]
X1=c()
X2=c()
X3=c()
X4=c()
runsum <- c(0,0,0,0)
for (i in c(1:n_sims)){
runsum=runsum+trajectory[[i]]
X1 <- c(X1,trajectory[[i]][[1]])
X2 <- c(X2,trajectory[[i]][[2]])
X3 <- c(X3,trajectory[[i]][[3]])
X4 <- c(X4,trajectory[[i]][[4]])
}
traj_df <- data.frame(X1,X2,X3,X4)
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
theme_classic()
plot1
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
theme_classic()
plot1
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(0,2))+
ylim(c(0,2))+
theme_classic()
plot1
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
theme_classic()
plot1
### visualize experimental hypercloud ###
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(mapping(y=0),color="red")+
theme_classic()
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(mapping=aes(y=0),color="red")+
theme_classic()
plot1
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
theme_classic()
plot1
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot1
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot2 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X3))+
geom_point()+
xlab("OD600")+
ylab("Delay1")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot3 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X4))+
geom_point()+
xlab("OD600")+
ylab("Delay2")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot4 <- ggplot(data=traj_df,mapping=aes(x=X2,y=X3))+
geom_point()+
xlab("XIP")+
ylab("Delay1")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot5 <- ggplot(data=traj_df,mapping=aes(x=X2,y=X4))+
geom_point()+
xlab("XIP")+
ylab("Delay2")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot2 <- ggplot(data=traj_df,mapping=aes(x=X3,y=X4))+
geom_point()+
xlab("Delay1")+
ylab("Delay2")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
cowplot::plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,nrow=3,ncol=2)
### visualize experimental hypercloud ###
plot1 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X2))+
geom_point()+
xlab("OD600")+
ylab("XIP")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot2 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X3))+
geom_point()+
xlab("OD600")+
ylab("Delay1")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot3 <- ggplot(data=traj_df,mapping=aes(x=X1,y=X4))+
geom_point()+
xlab("OD600")+
ylab("Delay2")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot4 <- ggplot(data=traj_df,mapping=aes(x=X2,y=X3))+
geom_point()+
xlab("XIP")+
ylab("Delay1")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot5 <- ggplot(data=traj_df,mapping=aes(x=X2,y=X4))+
geom_point()+
xlab("XIP")+
ylab("Delay2")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
plot6 <- ggplot(data=traj_df,mapping=aes(x=X3,y=X4))+
geom_point()+
xlab("Delay1")+
ylab("Delay2")+
xlim(c(-2,2))+
ylim(c(-2,2))+
geom_hline(yintercept=0,color="red")+
geom_vline(xintercept=0,color="red")+
theme_classic()
cowplot::plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,nrow=3,ncol=2)
cowplot::plot_grid(plot1,plot2,plot3,plot4,plot5,plot6,nrow=3,ncol=2)
cowplot::plot_grid(plot1,plot4,plot2,plot5,plot3,plot6,nrow=3,ncol=2)
choose(4,3)
.7*25+(45/46)*25+.97*25
66+25
library(rsm)
ccd(Y~A+B+C+D)
library(rsm)
library(DispenseFormulatrix)
setwd("~/Documents/GitHub/DispenseFormulatrix")
roxygen2::roxygenise()
roxygen2::roxygenize()
roxygen2::roxygenize()
install.packages("devtools")
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
View(design)
install_plate_layout()
usethis::use_package("JuliaCall")
roxygen2::roxygenize()
library(rsm)
library(DispenseFormulatrix)
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
install_plate_layout()
roxygen2::roxygenize()]
roxygen2::roxygenize()
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(rsm)
library(DispenseFormulatrix)
install_plate_layout()
roxygen2::roxygenize()
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(rsm)
library(DispenseFormulatrix)
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
roxygen2::roxygenize()
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(DispenseFormulatrix)
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
JuliaCall::julia_eval("x=4")
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
roxygen2::roxygenize()
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
View(out_designs)
out_designs
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"))
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"),num_generations=100,popsize=40)
devtools::install_github("https://github.com/bmdavid2/DispenseFormulatrix")
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"),num_generations=100,popsize=40)
library(rsm)
library(DispenseFormulatrix)
design <- ccd(Y~A+B+C+D,
n0=c(3,0),
randomize=FALSE,
oneblock=TRUE,
alpha='rotatable',
coding=list(A~(RNA-500)/(300/2),
B~(Temp-250)/(150/2),
C~(Time-100)/(50/2),
D~(Pressure-50/(10/2))))
install_plate_layout()
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"),num_generations=100,popsize=40)
out_designs <- plate_layout(design,c("A","B","C","D"),c("auto","col","wafer","col"),num_generations=100,popsize=40)
